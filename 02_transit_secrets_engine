
# Note: you need the following environment variables:
export VAULT_ADDR=
export VAULT_TOKEN=
export VAULT_NAMESPACE=admin

# Enable the transit secret engine
vault secrets enable transit 


# create test key, key type AES-256
curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --header "X-Vault-Namespace: admin" \
    --request POST \
    $VAULT_ADDR/v1/transit/keys/test-key | jq

# read test key
curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --header "X-Vault-Namespace: admin" \
    $VAULT_ADDR/v1/transit/keys/test-key | jq
    
# base64 encode plaintext
cat << EOF > plaintext.json
{
  "plaintext": "$(echo "if in doubt, always follow your nose" | base64)"
}
EOF

# encrypt plaintext
# curl \
#     --header "X-Vault-Token: $VAULT_TOKEN" \
#     --header "X-Vault-Namespace: admin" \
#     --request POST \
#     --data @plaintext.json \
#     $VAULT_ADDR/v1/transit/encrypt/test-key | jq

# encrypt plaintext and store ciphertext in json file
cat << EOF > ciphertext.json
{
  "ciphertext": "$(curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --header "X-Vault-Namespace: admin" \
    --request POST \
    --data @plaintext.json \
    $VAULT_ADDR/v1/transit/encrypt/test-key | jq -r '.data.ciphertext')"
}
EOF

# decrypt ciphertext
curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --header "X-Vault-Namespace: admin" \
    --request POST \
    --data @ciphertext.json \
    $VAULT_ADDR/v1/transit/decrypt/test-key | jq

echo <decoded ciphertext> | base64 --decode



# some more key operations
# list keys
curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --header "X-Vault-Namespace: admin" \
    --request LIST \
    $VAULT_ADDR/v1/transit/keys | jq

# rotate key
curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --header "X-Vault-Namespace: admin" \
    --request POST \
     $VAULT_ADDR/v1/transit/keys/test-key/rotate | jq

# rewrap data
curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --header "X-Vault-Namespace: admin" \
    --request POST \
    --data @ciphertext.json \
    $VAULT_ADDR/v1/transit/rewrap/test-key | jq

# delete key
curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --header "X-Vault-Namespace: admin" \
    --request DELETE \
    $VAULT_ADDR/v1/transit/keys/test-key | jq

# create rsa key
cat << EOF > rsa.json
{
    "type": "rsa-2048",
    "auto_rotate_period": "0",
    "exportable": true,
    "allow_plaintext_backup": true
}
EOF

curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --header "X-Vault-Namespace: admin" \
    --request POST \
    --data @rsa.json \
    $VAULT_ADDR/v1/transit/keys/rsa-key | jq

# generate random bytes
cat << EOF > format.json
{
  "format": "base64"
}
EOF
 
curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --header "X-Vault-Namespace: admin" \
    --request POST \
    --data @format.json \
    $VAULT_ADDR/v1/transit/random/384 | jq

# update key
cat << EOF > update.json
{
    "exportable": true
}
EOF

curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --header "X-Vault-Namespace: admin" \
    --request POST \
    --data @update.json \
    $VAULT_ADDR/v1/transit/keys/test-key/config | jq

#export keys
# standard key, key type AWS-256
curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --header "X-Vault-Namespace: admin" \
    $VAULT_ADDR/v1/transit/export/encryption-key/test-key | jq


# rsa key
curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --header "X-Vault-Namespace: admin" \
    $VAULT_ADDR/v1/transit/export/encryption-key/rsa-key | jq